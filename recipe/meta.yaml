{% set name = "r-changeforest" %}
{% set version = "1.2.1" %}
{% set posix = 'm2-' if win else '' %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/mlondschien/changeforest/archive/refs/tags/{{ version }}.tar.gz
  # TODO: Both
  # https://github.com/mlondschien/changeforest/releases/download/{{ version }}/changeforest-{{ version }}.tar.gz
  # and
  # https://github.com/mlondschien/changeforest/releases/download/{{ version }}/{{ version }}.tar.gz
  # don't work.
  sha256: 1880cdb7fc1935e06fed8aefb36d600e8eed100a7b5fdad4c2c0c9722ac1c9ef

build:
  number: 1
  rpaths:
    - lib/R/lib/
    - lib/
  # Checking windows to see if it passes. Uncomment the line if it fails.
  skip: true  # [win]

# Taken from https://github.com/conda-forge/r-gifski-feedstock
requirements:
  build:
    - cross-r-base {{ r_base }}  # [build_platform != target_platform]
    - r-r6                       # [build_platform != target_platform]
    - {{ compiler('rust') }}
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('m2w64_c') }}    # [win]
    - {{ stdlib("m2w64_c") }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}sed               # [win]
    - {{ posix }}grep              # [win]
    - {{ posix }}autoconf
    - {{ posix }}automake          # [not win]
    - {{ posix }}automake-wrapper  # [win]
    - {{ posix }}pkg-config
    - {{ posix }}make
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]
  host:
    - r-base
    - r-r6
  run:
    - r-base
    - r-r6

test:
  commands:
    - $R -e "library('changeforest')"           # [not win]
    - "\"%R%\" -e \"library('changeforest')\""  # [win]

about:
  home: https://github.com/mlondschien/changeforest
  license: BSD-3-Clause
  license_file: LICENSE
  summary: Classifier based non-parametric change point detection
  description: |
    Change point detection aims to identify structural breaks in the probability
    distribution of a time series. Existing methods either assume a parametric model for
    within-segment distributions or are based on ranks or distances and thus fail in
    scenarios with a reasonably large dimensionality.

    `changeforest` implements a classifier-based algorithm that consistently estimates
    change points without any parametric assumptions, even in high-dimensional scenarios.
    It uses the out-of-bag probability predictions of a random forest to construct a
    classifier log-likelihood ratio that gets optimized using a computationally feasible two-step
    method.

    See [1] for details.

    [1] M. Londschien, P. Bühlmann, and S. Kovács (2023). "Random Forests for Change Point Detection" Journal of Machine Learning Research
  dev_url: https://github.com/mlondschien/changeforest


extra:
  recipe-maintainers:
    - conda-forge/r
    - mlondschien
